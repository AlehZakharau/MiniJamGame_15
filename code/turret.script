local model = require("code/game_model")
local settings = require("code/settings")

local width, height
function init(self)
    model.ammo = model.ammo_max
    self.turret_pos = go.get_position()
    width, height = settings.get_display_size()
    msg.post(".", "acquire_input_focus")

end

---rotate_turret
---@param dir vector3 difference between two vectors
local function find_aim_angle(dir)
    local angle = math.atan2(-dir.x, dir.y)
    return vmath.quat_rotation_z(angle)
end

local function find_aim_pos(action)
    local mouse_pos = vmath.vector3(action.x, action.y, 0)
    local adjust_aim = vmath.vector3(-width * 0.5, -height * 0.5, 0)
    local aim_pos = mouse_pos + adjust_aim
    return aim_pos;
end

local function shoot(angle, target_pos)
    if model.ammo > 0 and model.had_shoot == false then
        print("shoot" .. model.ammo)
        model.ammo = model.ammo - 1
        model.had_shoot = true
        timer.delay(model.shoot_delay, false, model.cooldown)
        local id = factory.create("/bullet_factory#factory_bullet", turret_pos, angle)
        msg.post(id, "launch", {target_pos = target_pos})
    elseif model.ammo <= 0 then
        print("no ammo reload")
        msg.post("/hud#Hud","no_ammo")
    else
        print("to hot")
    end
end


local function reload()
    if model.had_reload == false then
        model.had_reload = true
        timer.delay(model.reload_time, false, model.reload)
        model.iterate_throw_creatures()
        msg.post("/hud#Hud", "reloading")
    else
        print(" already reloading")
    end
end

function on_input(self, action_id, action)
    if action.x and action.y then
        self.aim_pos = find_aim_pos(action)
        go.set_position(self.aim_pos, "/aim")

        self.angle = find_aim_angle(self.aim_pos - self.turret_pos)
        go.set(".", "rotation", self.angle)
    end
    if action_id == hash("touch") then
        shoot(self.angle, self.aim_pos)
    end
    if action_id == hash("reload") then
        reload()
    end
    if action_id == hash("pause") then
        if model.pause == false then
            model.pause = true
            model.pause_creatures()
        else
            model.pause = false
            model.release_creatures()
        end
    end

end

function on_reload(self)
    model.ammo = model.ammo_max
end
